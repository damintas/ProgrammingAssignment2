# Fonction pour créer un objet "matrix" spécial qui peut mettre en cache son inverse
makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL  # Initialisation du cache pour l'inverse
  
  set <- function(y) {
    x <<- y  # Mise à jour de la matrice
    inv <<- NULL  # Réinitialisation du cache
  }
  
  get <- function() x  # Récupération de la matrice
  
  setInverse <- function(inverse) inv <<- inverse  # Stockage de l'inverse en cache
  
  getInverse <- function() inv  # Récupération de l'inverse depuis le cache
  
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

# Fonction pour calculer ou récupérer l'inverse de la matrice en cache
cacheSolve <- function(x, ...) {
  inv <- x$getInverse()
  
  # Vérifier si l'inverse est déjà en cache
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  
  data <- x$get()
  inv <- solve(data, ...)  # Calcul de l'inverse
  x$setInverse(inv)  # Stockage de l'inverse en cache
  
  inv
}
